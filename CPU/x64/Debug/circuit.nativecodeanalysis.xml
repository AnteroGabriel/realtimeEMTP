<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>21</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Circuit::ipiv' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Circuit::{ctor}</FUNCTION>
    <DECORATED>??0Circuit@@QEAA@XZ</DECORATED>
    <FUNCLINE>21</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>21</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Circuit::simTime' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Circuit::{ctor}</FUNCTION>
    <DECORATED>??0Circuit@@QEAA@XZ</DECORATED>
    <FUNCLINE>21</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>21</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Circuit::SourceId' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Circuit::{ctor}</FUNCTION>
    <DECORATED>??0Circuit@@QEAA@XZ</DECORATED>
    <FUNCLINE>21</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>35</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Circuit::ipiv' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Circuit::{ctor}</FUNCTION>
    <DECORATED>??0Circuit@@QEAA@HHNN@Z</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>35</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Circuit::SourceId' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Circuit::{ctor}</FUNCTION>
    <DECORATED>??0Circuit@@QEAA@HHNN@Z</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>65</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Circuit::init</FUNCTION>
    <DECORATED>?init@Circuit@@QEAAXXZ</DECORATED>
    <FUNCLINE>64</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>66</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Circuit::init</FUNCTION>
    <DECORATED>?init@Circuit@@QEAAXXZ</DECORATED>
    <FUNCLINE>64</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>106</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Circuit::InvertMatrix</FUNCTION>
    <DECORATED>?InvertMatrix@Circuit@@QEAAXXZ</DECORATED>
    <FUNCLINE>86</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>167</LINE>
      <COLUMN>59</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Circuit::ToString</FUNCTION>
    <DECORATED>?ToString@Circuit@@QEAAXXZ</DECORATED>
    <FUNCLINE>154</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>167</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Circuit::ToString</FUNCTION>
    <DECORATED>?ToString@Circuit@@QEAAXXZ</DECORATED>
    <FUNCLINE>154</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>201</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Circuit::ToStringInv</FUNCTION>
    <DECORATED>?ToStringInv@Circuit@@QEAAXXZ</DECORATED>
    <FUNCLINE>188</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>201</LINE>
      <COLUMN>59</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Circuit::ToStringInv</FUNCTION>
    <DECORATED>?ToStringInv@Circuit@@QEAAXXZ</DECORATED>
    <FUNCLINE>188</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>329</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>6283</DEFECTCODE>
    <DESCRIPTION>'scale' is allocated with array new [], but deleted with scalar delete.</DESCRIPTION>
    <FUNCTION>Circuit::takeEigen</FUNCTION>
    <DECORATED>?takeEigen@Circuit@@QEAAXV?$vector@NV?$allocator@N@std@@@std@@AEAV?$vector@V?$complex@N@std@@V?$allocator@V?$complex@N@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>293</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
        <FILENAME>circuit.cpp</FILENAME>
        <LINE>301</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
        <FILENAME>circuit.cpp</FILENAME>
        <LINE>329</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>306</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Circuit::takeEigen</FUNCTION>
    <DECORATED>?takeEigen@Circuit@@QEAAXV?$vector@NV?$allocator@N@std@@@std@@AEAV?$vector@V?$complex@N@std@@V?$allocator@V?$complex@N@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>293</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>circuit.cpp</FILENAME>
      <LINE>393</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Circuit::optimizeG</FUNCTION>
    <DECORATED>?optimizeG@Circuit@@QEAAXV?$vector@PEAVswitchDevice@@V?$allocator@PEAVswitchDevice@@@std@@@std@@NH@Z</DECORATED>
    <FUNCLINE>335</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>