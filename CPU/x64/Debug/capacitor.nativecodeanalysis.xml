<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>9</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Capacitor::StampValueAdm' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Capacitor::{ctor}</FUNCTION>
    <DECORATED>??0Capacitor@@QEAA@NHHAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>9</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>9</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'Capacitor::StampRightHand' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>Capacitor::{ctor}</FUNCTION>
    <DECORATED>??0Capacitor@@QEAA@NHHAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>9</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>electricelement.h</FILENAME>
      <LINE>24</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'ElectricElement::value' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>ElectricElement::{ctor}</FUNCTION>
    <DECORATED>??0ElectricElement@@QEAA@XZ</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>27</LINE>
      <COLUMN>96</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>27</LINE>
      <COLUMN>91</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>27</LINE>
      <COLUMN>72</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>27</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>32</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>32</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>32</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>37</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>37</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>47</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>47</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>47</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>52</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>52</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stamp</FUNCTION>
    <DECORATED>?stamp@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>67</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stampRightHand</FUNCTION>
    <DECORATED>?stampRightHand@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>67</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stampRightHand</FUNCTION>
    <DECORATED>?stampRightHand@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>67</LINE>
      <COLUMN>104</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stampRightHand</FUNCTION>
    <DECORATED>?stampRightHand@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>74</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stampRightHand</FUNCTION>
    <DECORATED>?stampRightHand@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>74</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stampRightHand</FUNCTION>
    <DECORATED>?stampRightHand@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\luiz\vs repos\back up - lemt\nodemode\nodemode\</FILEPATH>
      <FILENAME>capacitor.cpp</FILENAME>
      <LINE>74</LINE>
      <COLUMN>103</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>Capacitor::stampRightHand</FUNCTION>
    <DECORATED>?stampRightHand@Capacitor@@UEAAXAEAVCircuit@@@Z</DECORATED>
    <FUNCLINE>61</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>